üìò Explicaci√≥n del Diagrama de Clases UML

-----------------------------------------------------------------------

üî∑ 1. Clases principales del dominio

-----------------------------------------------------------------------

‚úÖ Cliente
Representa a una persona que solicita un turno.
Atributos comunes: nombre, email u otros datos de contacto.


‚úÖ Servicio
Representa el tipo de servicio solicitado (por ejemplo: consulta, corte, instalaci√≥n).
Atributos: nombre, duraci√≥n.


‚úÖ Turno
Representa la reserva concreta realizada por un cliente para un servicio en una fecha y hora determinada.


Atributos:

fecha
hora
cliente: instancia de la clase Cliente
servicio: instancia de la clase Servicio


‚úî Relaciones:

Turno se compone de un Cliente y un Servicio, lo que se representa en UML con l√≠neas de composici√≥n (rombos negros).
Es una relaci√≥n "tiene un": Un turno tiene un cliente y tiene un servicio.


-----------------------------------------------------------------------

üî∂ 2. L√≥gica del sistema

-----------------------------------------------------------------------


‚úÖ GestorTurnos

Se encarga de administrar la creaci√≥n y cancelaci√≥n de turnos.


M√©todos clave:

crear_turno()
cancelar_turno()


Usa la clase Turno para instanciar y gestionar turnos.

‚úî Relaci√≥n:

GestorTurnos crea instancias de Turno (representado con una flecha simple).


-----------------------------------------------------------------------

üß© 3. Patr√≥n de Dise√±o: Strategy

-----------------------------------------------------------------------


Este patr√≥n se usa para cambiar din√°micamente el m√©todo de notificaci√≥n sin alterar la clase principal. Se representa con:

‚úÖ EstrategiaNotificacion (<<interface>>)

Es una interfaz que define el m√©todo notificar().
Cualquier clase que la implemente debe definir c√≥mo se env√≠a la notificaci√≥n.


‚úÖ NotificacionEmail
Implementa la estrategia para notificar por correo electr√≥nico.
Implementa el m√©todo notificar().


‚úÖ NotificacionSMS
Implementa la estrategia para notificar por SMS.
Tambi√©n define su propia l√≥gica en notificar().


‚úÖ Notificador
Clase que usa una estrategia de notificaci√≥n.
Tiene un atributo: estrategia, de tipo EstrategiaNotificacion.


M√©todos clave:

set_estrategia(): permite cambiar din√°micamente la estrategia.
enviar_mensaje(): ejecuta el m√©todo notificar() de la estrategia actual.


‚úî Relaciones del patr√≥n Strategy:

Notificador usa la interfaz EstrategiaNotificacion ‚Üí flecha punteada (asociaci√≥n con interfaz).

NotificacionEmail y NotificacionSMS implementan la interfaz ‚Üí flechas con cabeza vac√≠a (herencia).


-----------------------------------------------------------------------

üîö Resumen funcional

-----------------------------------------------------------------------


El sistema gestiona turnos entre clientes y servicios mediante una arquitectura orientada a objetos.

La l√≥gica principal est√° en GestorTurnos.

La funcionalidad de notificaci√≥n es extensible gracias al patr√≥n Strategy:

Pod√©s agregar nuevas estrategias como NotificacionWhatsApp sin modificar el c√≥digo del Notificador.

Esto respeta el principio de abierto/cerrado del dise√±o (Open/Closed Principle).